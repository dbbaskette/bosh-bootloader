// Code generated by go-bindata.
// sources:
// templates/bosh_director.tf
// templates/cf_dns.tf
// templates/cf_instance_groups.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/jumpbox.tf
// templates/vars.tf
// DO NOT EDIT!

package gcp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBosh_directorTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xd1\x6e\xe2\x3a\x10\x86\xef\xf3\x14\x23\xeb\x5c\x9c\x95\x80\xa5\x81\x40\xf6\xa2\x4f\x52\xa1\xc8\x09\x43\xd6\x5b\x13\x47\x8e\x0d\x5d\x55\xbc\xfb\xca\x71\x0c\xa6\x04\xd6\x61\x8b\xda\x5e\x24\x58\x33\xbf\xff\xf9\x3c\xe3\x08\xad\x6a\xad\x80\x54\xa8\xf6\x42\xbe\x66\x15\xdd\x22\x81\xf7\x08\x60\x47\xb9\x46\x78\x06\xf2\xdf\x7b\x29\x44\xc9\x31\x2b\xc4\xb6\xd6\x0a\xb3\x2e\x76\x92\xe7\x7c\xec\xde\x4d\xde\x81\x44\x87\x28\x72\x8a\x8d\xce\x87\x88\x9e\xc2\x5b\x5d\xfb\xb3\x47\x36\x17\xcd\xcf\x4c\xd4\x58\x65\x8a\x96\x41\xca\x1b\x26\x71\x4f\x39\x9f\x98\xd4\xb1\x49\xbd\x26\xbb\x66\x12\x0b\x25\xe4\x9d\xd2\x2e\xbd\x47\xfe\x97\xde\xd6\xb9\x78\xbb\x2e\xbc\xa3\x72\x82\xd5\x2e\x63\xeb\xc3\xb8\x0b\x3e\x13\x60\x95\x42\x59\x51\x3e\xdc\x9a\xcb\xf4\x5c\x49\x6c\x84\x96\x05\x02\xe9\x3f\x59\x02\xc4\x3b\x5b\xbb\x93\xc9\x86\x9e\xbf\x0b\xf7\x2e\x2b\x02\xa0\x5a\x89\xac\x90\x48\xcf\xce\xb7\x81\x67\xd8\x50\xde\x60\x6f\x7d\x05\x5b\xcb\x8b\xda\xcc\xa2\x15\xf8\xdf\x6c\x65\x5f\xdb\xd0\x11\xa4\x23\x98\x7e\xb3\x75\xed\xa8\x64\x34\xe7\xe8\x9a\xcf\x13\x53\xbf\x6b\xec\xec\x36\x4a\xb2\xaa\x34\xfe\xd6\xb8\xa1\x9a\x2b\xb3\xf8\x34\x9d\xb4\xff\xdf\x9f\x16\xb7\x11\x9d\xea\xe8\x28\xd9\x85\x3e\x48\x17\x68\xba\xd0\x08\x80\xd5\xad\xb7\x4c\xd2\xaa\xf4\x3a\xc0\xb3\x7d\x30\x61\xdd\x4e\xbe\x5e\xc0\x2c\x36\xc8\x37\x19\x67\xd5\xeb\x5f\x4e\xdb\xb5\x08\x01\x82\x6f\x16\xff\x79\x19\x17\x05\x1c\xc3\x3c\x6f\x03\x6f\x88\x08\xc0\xda\xb1\xb5\x9b\x66\x78\x21\x0e\xfe\x94\xac\x4c\x00\xe5\x5c\xec\x5b\x27\x00\xb5\x90\xaa\xb1\x66\x5e\x48\x1c\x93\x11\x90\x45\xba\x48\xcd\x33\x4e\x92\x24\x21\x2b\x1b\x26\x85\x12\x85\xe0\xc6\x8e\x2a\x6a\x63\xf0\x60\xa4\x14\x95\x25\x2a\x33\x35\x76\xa7\xf3\x7a\x8e\x37\x02\x59\x85\x92\x3a\xa5\xdc\x46\x75\x8a\xfb\x0c\x56\x01\xfe\xc3\xb9\xa5\xf3\xf9\xac\x7d\xa6\xf3\xf9\x27\x72\x74\xd7\xdf\x40\x96\xc7\xb4\x00\x9e\xc7\xd8\x47\x33\xf5\x6a\xf9\xc8\xf5\x2e\x40\xee\x7a\x0b\x67\xe3\x32\xc6\x4a\x84\x22\xea\x4d\x79\x20\x29\xaf\xa8\x5b\xcd\x37\x8f\x6d\xfb\xc5\x49\x9c\x4c\xed\xcb\x72\xb9\xfc\x8a\x7e\xeb\x3e\xac\x86\x4f\xbb\x70\x93\xe6\x87\xe0\x07\x72\x74\xdf\xfb\x90\x19\x9e\xcd\xd2\x1f\xff\x84\xee\x78\x68\xa3\xdb\x13\x36\xb8\x51\x03\x9b\xf3\x8b\x1a\xd2\x63\xc5\x8a\xed\x09\x56\xc8\x68\x5f\x8b\xd1\xeb\xbb\xc6\xff\x4f\x00\x00\x00\xff\xff\xde\x9f\x8a\xed\x73\x0b\x00\x00")

func templatesBosh_directorTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBosh_directorTf,
		"templates/bosh_director.tf",
	)
}

func templatesBosh_directorTf() (*asset, error) {
	bytes, err := templatesBosh_directorTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bosh_director.tf", size: 2931, mode: os.FileMode(480), modTime: time.Unix(1515362184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x3f\xcf\x9b\x30\x10\xc6\x77\x3e\xc5\xc9\xea\x54\x09\xf4\x4a\x9d\x33\x54\xea\xdc\xa5\x63\xf5\x0a\x39\xf6\x85\x20\x19\xdb\xba\x3b\x48\xd3\x57\x7c\xf7\xca\x04\xf2\xa7\x0d\x6a\x18\x22\x31\x24\x4b\x00\x3f\xbe\xe7\xb9\x9f\x11\xd7\x69\xaa\xf5\xd6\x21\x28\x3e\xb2\x60\x53\xda\xd0\xe8\xda\x2b\xf8\xc8\x00\xe4\x18\x11\x36\xa0\x58\xa8\xf6\x95\xca\xfa\x2c\x23\xe4\xd0\x92\x41\x50\x55\x08\x95\xc3\xd2\x7a\x2e\x1b\xed\x75\x85\xb6\xfc\x1d\x3c\x2a\x50\xe8\xbb\xe1\xf1\xe9\x36\x15\xf2\xba\x41\x18\x7f\x1b\x50\x9f\x3e\x3a\x4d\x45\x92\xd5\xb6\xcf\x07\x59\x06\x90\xb6\x4c\xc2\xb3\xe8\x26\x55\x5f\x0c\x3a\x64\x43\x75\x94\x3a\xf8\xa4\xfb\xf6\xfd\x07\xa4\x12\xb0\x0b\x04\xb2\x47\xb8\xa9\x0e\xe8\xbb\x9a\x82\x6f\xd0\xcb\xd0\x40\x68\x25\xb6\xf2\x57\xbb\x43\x5c\x46\xea\x90\xf8\x94\xb8\xd3\xae\xc5\x53\x8c\x99\x46\x8b\xeb\x36\x8b\x14\x7c\xaa\xd0\xcf\x93\x22\x34\x81\x6c\xc9\x28\x0a\xd4\xa1\x76\xd6\x68\xb2\xb9\xf5\xfc\x0f\xa7\x0d\xa8\xcf\xc5\x83\xe6\x13\xb9\xfe\x84\x27\xa2\xb7\x5c\x0e\x74\x7e\x4e\xe6\x26\x34\xb1\x15\x2c\x2b\x17\xb6\xda\x95\xda\x5a\x42\xe6\xc2\xec\xf2\xf1\x52\xbd\x4f\x07\x7e\xf6\xff\x9a\xca\x89\xb8\xcb\xc9\x7d\x79\x7b\xcb\x32\x80\xeb\x24\x0b\x19\xf5\x2a\x15\x20\xb2\x5a\x34\x0f\x01\xcf\x9b\xff\x1b\xb1\x18\xff\x7b\xf5\xfe\x18\x60\xb3\xcb\x99\xf7\x79\xa4\xf0\xeb\x78\x0f\x30\xf3\xfe\x09\x88\xaf\x82\x5f\xdc\x57\x43\xf7\x5e\xba\xc5\x60\xc5\xc4\xb9\x97\x56\x4c\x7c\x2e\xd3\xe4\x4d\xa1\x15\xa4\x55\x42\xbd\xc4\x5b\x4c\xd5\x86\x18\x1d\xd2\x1c\xd9\x71\xf9\xb9\x74\x0f\x2b\xfa\x10\xdc\xc4\x5a\x4c\xd3\x85\xaa\x22\xac\xb4\x84\x59\xa2\x57\x92\x17\xd5\x85\x33\xeb\xc0\xf3\x63\xeb\xc0\x2f\x9c\x0f\x4e\x28\x42\xbb\x6f\xb7\xf7\x30\x8e\x4b\xcf\x24\x39\x9a\xaf\x8f\xe5\xd8\xfa\x0d\xcd\x3f\x01\x00\x00\xff\xff\xc5\xca\x78\x60\xaa\x0a\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 2730, mode: os.FileMode(480), modTime: time.Unix(1514933843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_instance_groupsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd0\xcd\x6a\xeb\x30\x10\x05\xe0\xbd\x9f\xe2\x20\xb2\xb8\x17\xea\x12\xbb\x59\x15\x42\x1f\xc5\x28\xf2\xc4\x11\xc8\x1a\x33\x1a\x65\xd1\xe0\x77\x2f\x56\x53\x08\x21\x85\xfe\x2c\x1a\x2f\x35\xe3\xc3\x99\x4f\x28\x71\x16\x47\x30\x03\xf3\x10\xa8\x73\x3c\x4e\x59\xa9\xf3\x31\xa9\x8d\x8e\xba\x41\x38\x4f\x06\x46\x38\x2b\x49\x1d\x76\xf5\xda\xe0\x54\x01\xd1\x8e\x84\xf3\xb7\x85\x59\x9d\x8e\x56\x1e\x29\x1e\x3b\xdf\xcf\xf5\xc5\x76\xbd\x3a\x51\xa0\x91\xa2\xfe\x5b\x36\x5e\x39\x52\x7a\xc0\xfa\xff\x6c\x2a\xa0\xa7\xe4\xc4\x4f\xea\x39\x2e\x21\x4a\x22\x76\xcf\x32\x62\xa0\x48\x62\x95\x7a\x7c\x34\x41\x69\x02\x3d\x58\x85\x4f\x18\x73\x50\x5f\x2f\x69\xd8\xb3\xe0\xa0\x3a\x25\x04\xb6\xfd\xce\x06\x1b\x9d\x8f\xc3\x92\x5f\xe6\x97\x25\x3f\xab\x72\x3e\xa8\xef\x26\x16\x2d\xf7\x9d\x2f\xdc\xc2\x94\x6c\x53\x9e\xca\x74\x0b\xb3\xd9\x3c\x2d\x0f\x73\x35\x57\xd5\x4f\x0c\x9b\x6f\x19\x36\xb7\x0d\x9b\xfb\x31\x6c\xfe\xc0\xb0\x7d\x37\x74\x9c\xa3\x5e\x1b\x0a\x25\x15\xef\xf4\xea\xff\x84\x17\xac\xf1\x8c\xa6\xc0\x7d\x51\xbf\xbd\xad\xdf\xde\x8f\x7e\xfb\x3b\xfd\xb7\x00\x00\x00\xff\xff\x3c\xc7\xb9\xcb\x05\x04\x00\x00")

func templatesCf_instance_groupsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_instance_groupsTf,
		"templates/cf_instance_groups.tf",
	)
}

func templatesCf_instance_groupsTf() (*asset, error) {
	bytes, err := templatesCf_instance_groupsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_instance_groups.tf", size: 1029, mode: os.FileMode(480), modTime: time.Unix(1515797829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\x42\x0f\x6d\x11\x29\xb6\x93\x6e\xdd\x02\x8b\x1e\x8a\x5e\xb7\x3d\xf4\xb6\x08\x08\x8a\x1a\xd9\xac\x19\x51\x25\x29\x7b\x8d\x45\xfe\xfb\x82\xa4\x64\xeb\x93\x96\x14\x07\x8b\xec\x1e\xa2\x88\x9c\x37\xe4\x9b\x0f\x3e\x31\x07\x22\x19\x89\x39\xa0\x40\x29\x8e\x29\x48\xcd\x52\x46\x89\x86\x00\x7d\x5d\x20\xa4\x4f\x39\xa0\x8f\x28\x50\x5a\xb2\x6c\x1b\x2c\x5e\x16\x8b\x41\x0b\x9c\x4b\x76\x30\x3f\xf7\x70\x1a\xb4\xe6\x82\x12\xae\xec\xa8\x14\x85\x06\x89\x79\x8c\x63\x42\xf7\x90\x25\x58\x81\x3c\x30\x0a\x38\x23\xcf\xd6\xee\x87\xaf\x07\x22\x23\x09\xc6\x9e\x6a\xcc\x32\xa5\x49\x46\x01\x6f\xa5\x28\x72\x85\xfe\x40\xff\x09\x96\xfd\x18\xa0\xe0\x0e\x6d\x85\xd8\x72\xc0\x54\x3c\xe7\x85\x86\x36\x62\xe4\x7c\x85\x3c\x0e\xcb\x91\xb0\x1c\x09\x2b\x74\x48\xa2\x9f\x23\xe3\xf8\x27\xf4\xfb\x0d\x70\xcf\x60\x2f\x81\x77\xab\x0a\x78\x8a\x39\xcb\xf6\xdf\x65\xbf\x67\xef\x37\xdb\xf4\x05\xf1\xc5\xc6\x5b\x14\x3a\x2f\x34\x0a\x4a\x06\x5a\x50\x2e\x4d\x0e\x84\x17\x65\xbc\x6d\x7a\x44\xfe\xcc\xe8\x05\xe6\x31\x66\x79\x07\xae\xb5\x91\x2d\x17\x31\xe1\x98\x24\x89\x04\xa5\x22\x9a\x86\xd5\x63\xf9\xb3\x09\xad\xd4\x0e\xe7\x52\x7c\x39\x8d\x43\xaf\xc1\x2a\xb5\x0b\xad\x65\x3f\xb0\xa6\x39\x9e\xb2\xee\x1a\xb2\xa6\x79\xe8\x4c\xfb\xa1\x8f\x6a\x32\xe4\x71\x60\xfb\x54\x42\xb2\x2b\xe2\x89\x78\xce\xa8\x89\x28\x41\x89\x42\x52\x40\x41\xcb\x2a\x65\x12\x8e\x84\xf3\x00\x05\xd5\x63\x48\x53\xe7\xcb\x36\x01\xf7\xef\x5c\x1a\x90\x1d\x30\x4b\x5e\x42\x9a\x86\x22\x87\xcc\x94\x56\x02\x39\x64\x89\xc2\x22\x43\x1f\xd1\xe7\xb6\x83\x0c\xf4\x51\xc8\x7d\x14\xc7\x3c\x2c\x9f\x83\x27\x03\xee\x9e\xcf\xe0\xd7\xcd\xa2\x32\xf5\x16\x08\x11\xce\xc5\xd1\xae\x11\xa1\x5c\x0a\x2d\xa8\xe0\x06\x46\xd3\x3c\x70\x2f\x85\xd4\xca\x61\x7f\x0e\x36\xcb\xe0\x0e\x05\x8f\x8f\x0f\xd6\xf1\x8b\x01\x70\x6c\x60\x49\xb2\x2d\x28\x3b\x69\x19\xd9\xff\xf7\xcb\xe0\xc9\x4c\xd0\x44\x6e\x41\x63\x4d\xb6\x6e\x78\x6c\x61\x3c\x79\xd9\x6e\xa6\x7f\x80\x82\x4b\x01\xd4\x28\xef\x21\xdb\x1f\xc4\x12\x36\x15\xf2\x48\x64\xc2\xb2\x2d\x96\x05\x07\x07\xbf\xd3\x3a\x0f\x2f\x23\xa1\x1b\x19\x11\x5e\x63\x68\xc8\x64\x79\xb5\xde\xd9\x15\x5d\xd1\x89\x86\xa2\x5d\xb2\x6d\x5c\xba\x7a\x8f\xaa\x95\xf3\xb8\x2c\xe3\x73\x5b\xb3\x78\x26\xbe\x2e\x7a\x06\x6f\xb3\x7c\x1d\x3f\x6a\x36\x41\xea\x3b\x30\xa4\x9a\x14\xa9\x71\x1c\x99\xf4\xf7\x92\xd4\x89\x41\x2d\x7f\x2a\x0f\x1d\x5e\xba\xc4\xd8\xf9\x6e\xb2\xed\x0d\x8a\x4a\x96\x6b\x66\x9b\x43\x20\x81\x70\x7e\x42\x04\x71\x41\x12\x14\x13\x6e\x0e\x57\x89\xe2\x42\x23\xce\x94\x86\x04\x11\x85\x48\x86\x0c\x08\x3a\x83\x14\x92\xe3\x67\x92\x0f\x72\x53\x8e\x37\x08\x29\x24\x0f\xcd\xbb\x3a\x25\x23\x77\xaf\xda\xdb\x57\x9e\xfd\x0f\x93\xa0\xfa\x59\xa8\x0c\xa6\x50\xa1\xfa\xb9\x78\x35\x21\x08\xb5\x04\x64\xd5\xeb\x5a\x78\xad\x59\x06\xd7\xfc\x5a\xc7\xf2\xf7\xbd\x8e\xb2\x0d\x4a\x88\x0b\xa1\x38\x97\x90\xb2\x2f\x1d\x2e\x7b\xb2\xa8\x50\x20\x0d\x23\x07\x96\x40\x62\xb6\x80\x4a\xdd\x8b\xf6\x70\x42\xf7\xf6\x4d\xcd\x1b\xca\x09\x93\xb6\x20\x2e\xea\xf8\xe2\xc6\x23\xa1\xad\xef\x3a\xd0\x90\x91\x3b\x94\x38\x4b\x81\x9e\x28\x87\xf2\x60\xa2\x12\x0c\x50\x0c\xa9\x90\x80\x13\xa3\xfa\x84\x71\xac\x65\x01\xf6\x1c\xf2\x31\x56\x86\xb0\x95\x84\x65\x10\xfd\x67\x45\xd9\xb9\x2d\x6f\x29\x29\xb8\xae\x8e\xa8\x71\x02\x6f\x6c\xc5\xec\x80\x70\xbd\xc3\x74\x07\x74\xef\x96\x99\x17\x31\x67\x34\x74\x03\x61\x39\xe0\x5d\xa9\xb3\xb0\x6b\xb5\x7d\xa7\x8e\x59\x1d\xef\x42\xea\x5a\xb2\x6f\x96\x9b\xa5\x7d\x2f\xe1\xff\x02\x94\xc6\x39\xd1\x3b\x83\x7d\xef\x6c\x83\xab\xcc\x76\x1c\x8d\x59\xfc\x60\xa5\x9b\xa3\x79\x68\x91\x83\x4b\x1c\x29\xc8\x4c\x28\x7d\xcb\xe9\x8d\x7d\xdd\xe0\x7d\x88\x33\x27\xcf\x36\x4b\x9f\x3a\x5b\x3d\x2c\xa3\xf5\x6a\x65\x15\xda\x7a\x6d\xe6\x3f\xfc\x12\xad\x7e\x73\x2f\x56\x1f\xac\x69\x5d\xb2\xa1\xe9\xa2\xad\xfb\xcd\x51\x02\xe6\x42\xf0\x6b\xe2\xbb\x36\xb5\xf9\xf5\x71\xf9\x5c\x1a\x8c\x78\x43\x0d\x9e\x2d\xaf\x54\xce\x65\xde\x84\x6c\xea\x03\x1f\x4e\xa5\xf3\xec\xf7\xa3\xf4\xd7\xeb\xf5\xfa\x92\x46\x5d\x0d\x3f\x2d\x6a\xfe\x33\xad\x91\x1d\x33\x43\x67\x72\x1d\x94\x62\x22\xc3\x24\x4d\x59\xc6\xb4\x3d\x99\x3e\xfd\xfd\xe9\xaf\x2b\x71\xed\x93\xb2\xc3\xe1\xbd\xb6\x8e\x86\xfc\x9c\x96\xe0\x83\x9a\xd3\xc0\xd8\x78\x38\x85\x5c\x0f\xde\xbf\x7f\xfe\xd3\xd2\xcd\xb7\xfb\x9c\x9f\x5f\xb4\xb5\x0f\xfb\x11\x55\xdb\xac\xac\x8b\xed\xa8\xd2\xaa\x4d\x7f\x0f\x65\xb5\x5a\xae\x1f\xc3\x87\xf5\xaf\x1f\x36\xf3\x8b\xab\xc3\xae\xbf\xba\x1a\x4d\xb1\x97\xdd\x6b\xbc\xce\xd0\x00\x9e\x28\x8e\x89\x63\x47\x05\xcc\xd5\x00\x9d\xd6\x32\x8b\x00\x6f\x73\x31\x8a\xab\xb6\x7f\x1b\x43\x1b\xf8\x6e\x20\x3b\x64\xf5\x86\xf3\x6e\x81\x90\x3f\xa4\xbd\x3d\xcb\x47\xf9\x75\xc6\x27\x76\xad\xda\xa2\xbd\x6d\xab\x96\xef\xb7\x68\x5e\x23\x6e\x0c\xe7\x77\xad\xa3\x9a\xac\x31\x8e\x57\x2e\x9b\xcc\x84\x69\xf9\x39\x0a\x71\x72\x3e\x8e\x4c\xc5\x1e\xe5\x3e\xaa\xc5\xf4\xe6\xe3\x51\x95\xf7\x3a\xa3\xb2\xf1\x3c\x7b\x7a\x2e\x1e\x95\x3f\x07\xed\x7d\xcd\x0d\x92\xaf\x7d\xb7\x3c\x8b\x8e\x49\x6c\xbc\x01\x19\x9b\xe5\x9b\x70\xd1\xbe\x67\x9f\x5b\x85\xe5\x8d\x7b\xf7\x4f\x23\x2d\x60\x73\x58\x5e\x03\xae\x74\xc5\x19\xb5\x66\x3b\x41\x92\x38\xe3\x66\xdc\xba\x31\x73\xb3\xce\xfa\xbe\x92\x14\x6f\xfe\xcd\xb7\x79\x7c\x9c\xab\x24\x1a\x5c\x8f\xd6\x10\x1d\x3a\x86\xb8\x98\xd4\xf8\xfa\x48\xf6\xe8\x85\xca\xc3\x0d\x45\xff\xd0\x0a\x7c\xce\x27\xd5\x66\x49\xb7\xbf\x3a\x4d\x38\x5f\x5f\x9f\x3d\x7f\xb7\xfa\x16\x00\x00\xff\xff\x6e\xc6\xe6\x08\x1c\x1f\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 7964, mode: os.FileMode(480), modTime: time.Unix(1515795195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\x82\xd8\x71\x32\x0a\xaf\x87\x5e\x76\x1a\x76\xed\x76\xd8\x6d\x28\x04\xc5\xa6\x1d\xa1\xaa\x28\x48\x72\x8c\xa1\xf0\xbb\x0f\xb2\x1d\xc7\x5d\xb3\x24\x40\x10\xa0\x27\x13\x34\xf5\x93\xfa\x7e\x8a\xbb\xe4\xbb\x04\x58\xb1\xab\xb8\x0b\x91\x54\xd2\xa1\xa5\xa4\x3c\xb3\x45\x78\x15\x00\x3b\x6d\x3b\x82\xaf\x80\x9f\x5e\x5b\xe6\xd6\x92\xaa\xf8\xc5\x77\xe9\x4d\x69\x31\xc5\x72\x8c\x9d\x7e\xa1\x01\xc5\x20\xc4\x7b\x79\xbb\x51\xc6\x9f\x13\xd6\x75\x1d\x28\xc6\x62\x39\x26\xf7\x99\xf9\x3b\xa9\x07\x8a\xdc\x85\x8a\x00\xff\x39\xdf\x98\x40\xbd\xb6\x16\x01\xf7\xa1\x5c\xb4\xa6\xe6\x79\x46\x00\x98\xda\xef\x74\x28\xc8\xed\x94\xa9\x87\x43\x9d\x64\x4f\x0e\x73\x29\xa5\x9e\xc3\xf3\xd1\x49\xe7\x7f\xc5\x66\x63\xe5\x3e\x9e\xaf\x2f\x00\xb4\xb5\xdc\x8f\xed\x00\x7c\xe0\xc4\x15\xdb\x2c\x93\x2a\x8f\x53\x92\x43\x8a\xd3\x18\xbf\xf1\xe1\x0e\x3f\x03\xde\xdf\x7f\xc9\x9f\xb2\x2c\x4b\x7c\x12\x00\x43\x16\x9a\x49\x27\xdd\xc6\xb1\xf4\x70\x99\xa7\x93\x20\x66\x5c\xb8\x72\x40\x2e\xb9\x05\xc3\xff\x19\x9c\xc6\xfc\x66\x55\x70\xb5\x01\x17\x6a\x0b\x80\x48\x31\x1a\x76\x4a\x37\x8d\x71\x26\xfd\xc9\xf5\x8f\x3f\x1e\xbf\x9f\xf1\x97\x43\xaf\x43\x6d\x5c\xab\x42\x67\x09\x01\x63\xdc\xca\x43\x56\x4e\xd9\xb5\xcf\x67\xbc\x8e\x71\x8b\x0b\xe7\x55\xf5\x85\x1b\x1f\xc9\x36\xca\x1a\xf7\x3c\x64\x95\xec\xaa\x0a\xda\xb5\x34\xaa\x8c\x56\x0a\x00\xe3\xd5\x7a\x09\x7e\x7d\xfb\x39\x67\x67\x47\x8e\xb7\xbc\xfa\x2d\xbc\x63\xb5\x4d\xc9\xc7\xab\x68\x8d\x0a\x37\xe3\x95\x5f\xc0\x07\xc3\x75\x35\xad\x9b\xc1\x7a\xb8\xbb\x35\xab\xbf\x01\x00\x00\xff\xff\x5f\xcd\x56\x41\x23\x06\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 1571, mode: os.FileMode(480), modTime: time.Unix(1514933843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x0a\x83\x30\x10\x45\xf7\x39\x45\x08\xdd\xaa\x20\x64\x23\xf4\x2c\x21\x35\x83\xb5\x44\x27\x4c\x66\x44\x10\xef\x5e\x4a\x6d\xad\xd0\x4d\xbb\x1d\xe6\xbd\xff\x3f\x41\x46\xa1\x16\xb4\xe9\x10\xbb\x08\xae\xc5\x21\x09\x83\xf3\x21\x10\xe4\x6c\xb4\xb9\xc9\x90\x2e\x38\x17\x7d\x32\x7a\x51\x5a\x8f\x7e\x00\x7d\xd6\xe6\xb4\x4c\x9e\x4a\x18\x27\xd7\x87\xb5\xf8\xf8\x52\xab\x52\x28\x9c\x84\xdf\xb0\x13\x8a\x4f\x7a\xf2\x51\x36\xfc\x7b\x62\xb9\x9b\xca\xed\xb4\x36\x75\x7d\xb0\xc2\xcc\x40\xa3\x8f\xee\xd5\xe9\x2f\xeb\x41\x19\x7a\x82\x96\x91\xf6\xe1\x07\xef\x95\x39\xe5\xa6\xaa\x7e\x6b\x6d\xad\xb5\x8f\x94\x7b\x00\x00\x00\xff\xff\x10\xf1\x6b\x1b\x66\x01\x00\x00")

func templatesJumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesJumpboxTf() (*asset, error) {
	bytes, err := templatesJumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 358, mode: os.FileMode(480), modTime: time.Unix(1514933843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x4b\x8a\xc4\x20\x10\x06\xe0\xbd\xa7\x28\x8a\x2c\x66\x36\x73\x83\x9c\x25\x38\xb1\x22\xd5\x88\x4a\x69\x84\xee\xe0\xdd\x1b\x93\x40\x12\x9a\x86\xb8\xd4\xef\xc7\x7a\x14\x2d\xac\xff\x1d\x01\x46\x09\x0f\x1a\xf3\xc0\x06\x61\x51\x00\xf9\x19\x09\x7a\xc0\x94\x85\xbd\x45\x55\x95\x3a\xb0\x90\xe5\xe0\x6f\xc0\x57\xf0\x74\x93\xa5\xab\x73\x9c\xf2\xc7\xaf\x2d\xdc\x6a\xf4\x29\x6b\x3f\xd2\x60\x25\xcc\x71\x0f\x1a\x9a\xf4\xec\x32\xf4\x30\x69\x97\xe8\x1a\x25\x5f\xee\x75\x36\x0a\x19\xf2\x99\xb5\x4b\x5f\x75\x94\x50\xd8\x90\x00\xda\x10\xac\xdb\x1b\x3c\x25\x9b\xef\x96\x89\x1d\xfd\x60\xb7\x14\x2d\x7f\xa7\xc7\x8a\xbf\x15\x15\xc0\x3e\x70\x68\x67\xf5\xcd\x1d\x5b\x58\xcd\x36\x67\xb8\x9a\xed\xb2\xb6\x52\xde\x01\x00\x00\xff\xff\xe6\x93\x9b\xa4\xbf\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 447, mode: os.FileMode(480), modTime: time.Unix(1515795195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bosh_director.tf": templatesBosh_directorTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_instance_groups.tf": templatesCf_instance_groupsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/jumpbox.tf": templatesJumpboxTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bosh_director.tf": &bintree{templatesBosh_directorTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_instance_groups.tf": &bintree{templatesCf_instance_groupsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"jumpbox.tf": &bintree{templatesJumpboxTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

